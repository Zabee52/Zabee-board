# 도현이의 집 N개가 수직선 위에 있다. 각각의 집의 좌표는 x1, ..., xN이고, 집 여러개가 같은 좌표를 가지는 일은 없다.
# 도현이는 언제 어디서나 와이파이를 즐기기 위해서 집에 공유기 C개를 설치하려고 한다.
# 최대한 많은 곳에서 와이파이를 사용하려고 하기 때문에, 한 집에는 공유기를 하나만 설치할 수 있고,
# 가장 인접한 두 공유기 사이의 거리를 가능한 크게 하여 설치하려고 한다.
# C개의 공유기를 N개의 집에 적당히 설치해서, 가장 인접한 두 공유기 사이의 거리를 최대로 하는 프로그램을 작성하시오.

# 첫째 줄에 집의 개수 N (2 ≤ N ≤ 200,000)과 공유기의 개수 C (2 ≤ C ≤ N)이 하나 이상의 빈 칸을 사이에 두고 주어진다.
# 둘째 줄부터 N개의 줄에는 집의 좌표를 나타내는 xi (0 ≤ xi ≤ 1,000,000,000)가 한 줄에 하나씩 주어진다.

# 첫째 줄에 가장 인접한 두 공유기 사이의 최대 거리를 출력한다.

# ex)
# 5 3
# 1
# 2
# 8
# 4
# 9
# 입력값일 경우, 설치하는 공유기는 3개, 집의 좌표는 정렬하면 1 2 4 8 9
# 3개를 배치할것이므로 1, 4, 9에 배치
# 가장 인접한건 4-1 = 3이므로 3을 출력.

# 1. 균등한 간격으로 공유기를 배치한다.
# 2. 이 중 가장 거리가 짧은 것을 출력한다?
# -> 불가. 1 7 8 9 10 같은 경우 대응할 수 없음.


n, c = map(int, input().split())
x = []
for _ in range(n):
    x.append(int(input()))
x.sort()

# 1. max 값 x[-1] - x[0]을 먼저 구한다. - 등장하는 최대거리
max_dist = x[-1] - x[0]
# 2. min 값 1 을 지정한다.
min_dist = 1

result = 0
# 이분탐색 시작
while max_dist >= min_dist:
    # 3. mid 값 (max - min) // 2  를 구한다.
    mid = (max_dist + min_dist) // 2
    # 4. 공유기 설치를 위한 초기 설정. 첫 위치에 설치하므로 start = x[0], cnt 는 1부터 시작. start 가 최근 설치한 공유기 위치.
    start = x[0]
    cnt = 1
    for i in range(1, n):
        # 공유기 사이의 간격 d 측정
        d = x[i] - start
        # 간격이 mid 보다 크거나 같을 경우(공유기 설치 조건을 만족할 경우) 공유기 설치.
        if mid <= d:
            cnt += 1
            start = x[i]

    # 5. 설치한 공유기의 대수 비교
    if cnt >= c:
        # 5-1. 설치한게 설치한 양보다 많거나 같을 경우 = 더 적게 설치해야함. min 이 올라옴
        result = mid
        min_dist = mid + 1
    else:
        # 5-2. 설치한게 설치한 양보다 적을 경우 = 더 많이 설치해야함. max 가 내려옴
        max_dist = mid - 1

print(result)
